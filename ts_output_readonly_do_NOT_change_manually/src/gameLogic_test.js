describe("In TicTacToe", function () {
    var P1_TURN = 0;
    var P2_TURN = 1;
    var NO_ONE_TURN = -1;
    var NO_ONE_WINS = null;
    var P1_WIN_SCORES = [1, 0];
    var P2_WIN_SCORES = [0, 1];
    var TIE_SCORES = [0, 0];
    function expectException(turnIndexBeforeMove, boardBeforeMove, row, col, moveType) {
        var stateBeforeMove = boardBeforeMove ? { board: boardBeforeMove, delta: null, gameOver: false } : null;
        // We expect an exception to be thrown :)
        var didThrowException = false;
        try {
            gameLogic.createMove(stateBeforeMove, row, col, moveType, turnIndexBeforeMove);
        }
        catch (e) {
            didThrowException = true;
        }
        if (!didThrowException) {
            throw new Error("We expect an illegal move, but createMove didn't throw any exception!");
        }
    }
    function expectMove(turnIndexBeforeMove, boardBeforeMove, row, col, moveType, attackType, boardAfterMove, turnIndexAfterMove, endMatchScores) {
        var expectedMove = {
            turnIndex: turnIndexAfterMove,
            endMatchScores: endMatchScores,
            state: { board: boardAfterMove, delta: { row: row, col: col, moveType: moveType, attackType: attackType }, gameOver: false }
        };
        var stateBeforeMove = boardBeforeMove ? { board: boardBeforeMove, delta: null, gameOver: false } : null;
        var move = gameLogic.createMove(stateBeforeMove, row, col, moveType, turnIndexBeforeMove);
        expect(angular.equals(move, expectedMove)).toBe(true);
    }
    it("Initial move", function () {
        var move = gameLogic.createInitialMove();
        var expectedMove = {
            turnIndex: P1_TURN,
            endMatchScores: NO_ONE_WINS,
            state: { board: [[['', '', ''],
                        ['', '', ''],
                        ['', '', ''],
                        ['', '', ''],
                        ['', '', '']],
                    [['', '', ''],
                        ['', '', ''],
                        ['', 'P', ''],
                        ['', '', ''],
                        ['', '', '']],
                    [['', '', ''],
                        ['', '', ''],
                        ['', '', ''],
                        ['', '', ''],
                        ['', '', '']],
                    [['', '', ''],
                        ['', '', ''],
                        ['', 'P', ''],
                        ['', '', ''],
                        ['', '', '']]],
                delta: null,
                gameOver: false }
        };
        expect(angular.equals(move, expectedMove)).toBe(true);
    });
    it("P1 attacking in 0x0 from initial state", function () {
        expectMove(P1_TURN, null, 0, 0, 'attack', '', [[['B', '', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', '']],
            [['', '', ''],
                ['', '', ''],
                ['', 'P', ''],
                ['', '', ''],
                ['', '', '']],
            [['', '', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', '']],
            [['B', '', ''],
                ['', '', ''],
                ['', 'P', ''],
                ['', '', ''],
                ['', '', '']]], P2_TURN, NO_ONE_WINS);
    });
    it("P2 attacking in 0x1", function () {
        expectMove(P2_TURN, [[['B', '', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', '']],
            [['', '', ''],
                ['', '', ''],
                ['', 'P', ''],
                ['', '', ''],
                ['', '', '']],
            [['', '', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', '']],
            [['B', '', ''],
                ['', '', ''],
                ['', 'P', ''],
                ['', '', ''],
                ['', '', '']]], 0, 1, 'attack', '', [[['B', '', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', '']],
            [['', 'B', ''],
                ['', '', ''],
                ['', 'P', ''],
                ['', '', ''],
                ['', '', '']],
            [['', 'B', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', '']],
            [['B', '', ''],
                ['', '', ''],
                ['', 'P', ''],
                ['', '', ''],
                ['', '', '']]], P1_TURN, NO_ONE_WINS);
    });
    it("atacking in a non-empty position is illegal", function () {
        expectException(P1_TURN, [[['B', '', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', '']],
            [['', 'B', ''],
                ['', '', ''],
                ['', 'P', ''],
                ['', '', ''],
                ['', '', '']],
            [['', 'B', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', '']],
            [['B', '', ''],
                ['', '', ''],
                ['', 'P', ''],
                ['', '', ''],
                ['', '', '']]], 0, 0, 'attack');
    });
    /* We don't have a good way to handle game over yet */
    // it("cannot move after the game is over", function() {
    //   expectException(P2_TURN,
    //     [[['X', 'O', ''],
    //      ['X', 'O', ''],
    //      ['X', '', ''],
    //      ['', '', ''],
    //      ['', '', '']],
    //      [['', '', ''],
    //      ['', '', ''],
    //      ['', '', ''],
    //      ['', '', ''],
    //      ['', '', '']],
    //      [['', '', ''],
    //      ['', '', ''],
    //      ['', '', ''],
    //      ['', '', ''],
    //      ['', '', '']],
    //      [['', '', ''],
    //      ['', '', ''],
    //      ['', '', ''],
    //      ['', '', ''],
    //      ['', '', '']]], 
    //     2, 1, 'attack');
    // });
    it("P2 moving in 2x1", function () {
        expectMove(P2_TURN, [[['B', '', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', '']],
            [['', 'B', ''],
                ['', '', ''],
                ['', 'P', ''],
                ['', '', ''],
                ['', '', '']],
            [['', 'B', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', '']],
            [['B', '', ''],
                ['', '', ''],
                ['P', '', ''],
                ['', '', ''],
                ['', '', '']]], 2, 1, 'move', '', [[['B', '', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', '']],
            [['', 'B', ''],
                ['', '', ''],
                ['', 'P', ''],
                ['', '', ''],
                ['', '', '']],
            [['', 'B', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', '']],
            [['B', '', ''],
                ['', '', ''],
                ['', 'P', ''],
                ['', '', ''],
                ['', '', '']]], P1_TURN, NO_ONE_WINS);
    });
    it("P1 wins by attacking in 2x1", function () {
        expectMove(P1_TURN, [[['B', '', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', '']],
            [['', 'B', ''],
                ['', '', ''],
                ['', 'P', ''],
                ['', '', ''],
                ['', '', '']],
            [['', 'B', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', '']],
            [['B', '', ''],
                ['', '', ''],
                ['', 'P', ''],
                ['', '', ''],
                ['', '', '']]], 2, 1, 'attack', '', [[['B', '', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', '']],
            [['', 'B', ''],
                ['', '', ''],
                ['', 'P', ''],
                ['', '', ''],
                ['', '', '']],
            [['', 'B', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', '']],
            [['B', '', ''],
                ['', '', ''],
                ['', 'P', ''],
                ['', '', ''],
                ['', '', '']]], NO_ONE_TURN, P1_WIN_SCORES);
    });
    it("P2 wins by attacking in 2x1", function () {
        expectMove(P2_TURN, [[['B', '', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', '']],
            [['', 'B', ''],
                ['', '', ''],
                ['', 'P', ''],
                ['', '', ''],
                ['', '', '']],
            [['', 'B', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', '']],
            [['B', '', ''],
                ['', '', ''],
                ['', 'P', ''],
                ['', '', ''],
                ['', '', '']]], 2, 1, 'attack', '', [[['B', '', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', '']],
            [['', 'B', ''],
                ['', '', ''],
                ['', 'P', ''],
                ['', '', ''],
                ['', '', '']],
            [['', 'B', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', '']],
            [['B', '', ''],
                ['', '', ''],
                ['', 'P', ''],
                ['', '', ''],
                ['', '', '']]], NO_ONE_TURN, P2_WIN_SCORES);
    });
    /* You can't tie in this game */
    // it("the game ties when there are no more empty cells", function() {
    //   expectMove(P1_TURN,
    //     [[['X', 'O', 'X'],
    //      ['X', 'O', 'O'],
    //      ['O', 'X', ''],
    //      ['', '', ''],
    //      ['', '', '']],
    //      [['', '', ''],
    //      ['', '', ''],
    //      ['', '', ''],
    //      ['', '', ''],
    //      ['', '', '']],
    //      [['', '', ''],
    //      ['', '', ''],
    //      ['', '', ''],
    //      ['', '', ''],
    //      ['', '', '']],
    //      [['', '', ''],
    //      ['', '', ''],
    //      ['', '', ''],
    //      ['', '', ''],
    //      ['', '', '']]], 
    //     2, 2,
    //     [[['X', 'O', 'X'],
    //      ['X', 'O', 'O'],
    //      ['O', 'X', 'X'],
    //      ['', '', ''],
    //      ['', '', '']],
    //      [['', '', ''],
    //      ['', '', ''],
    //      ['', '', ''],
    //      ['', '', ''],
    //      ['', '', '']],
    //      [['', '', ''],
    //      ['', '', ''],
    //      ['', '', ''],
    //      ['', '', ''],
    //      ['', '', '']],
    //      [['', '', ''],
    //      ['', '', ''],
    //      ['', '', ''],
    //      ['', '', ''],
    //      ['', '', '']]], 
    //     NO_ONE_TURN, TIE_SCORES);
    // });
    it("P1 attacking outside the board (in 0x3) is illegal", function () {
        expectException(P1_TURN, [[['B', '', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', '']],
            [['', 'B', ''],
                ['', '', ''],
                ['', 'P', ''],
                ['', '', ''],
                ['', '', '']],
            [['', 'B', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', ''],
                ['', '', '']],
            [['B', '', ''],
                ['', '', ''],
                ['', 'P', ''],
                ['', '', ''],
                ['', '', '']]], 0, 3, 'attack');
    });
});
//# sourceMappingURL=gameLogic_test.js.map