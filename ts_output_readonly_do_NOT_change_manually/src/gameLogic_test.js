// describe("In SnipeCity", function() {
//   let P1_TURN = 0;
//   let P2_TURN = 1;
//   let NO_ONE_TURN = -1;
//   let NO_ONE_WINS: number[] = null;
//   let P1_WIN_SCORES = [1, 0];
//   let P2_WIN_SCORES = [0, 1];
//   // let TIE_SCORES = [0, 0];
//   function expectException(
//       turnIndexBeforeMove: number,
//       turnCountBeforeMove: number[],
//       currentBuffs: string[],
//       buffsEnabled: boolean,
//       boardBeforeMove: Board[],
//       row: number,
//       col: number,
//       moveType: string,
//       attackType: string, //not actually used here since we don't care about the delta
//       gameOver: boolean): void {
//     let stateBeforeMove: IState = boardBeforeMove ? {board: boardBeforeMove, delta: null, gameOver: gameOver, turnCounts: turnCountBeforeMove, currentBuffs: currentBuffs, buffsEnabled: buffsEnabled} : null;
//     // We expect an exception to be thrown :)
//     let didThrowException = false;
//     try {
//       gameLogic.createMove(stateBeforeMove, row, col, moveType, turnIndexBeforeMove);
//     } catch (e) {
//       didThrowException = true;
//     }
//     if (!didThrowException) {
//       throw new Error("We expect an illegal move, but createMove didn't throw any exception!")
//     }
//   }
//   function expectMove(
//       turnIndexBeforeMove: number,
//       turnCountBeforeMove: number[],
//       currentBuffs: string[],
//       buffsEnabled: boolean,
//       boardBeforeMove: Board[],
//       row: number,
//       col: number,
//       moveType: string,
//       attackType: string,
//       boardAfterMove: Board[],
//       turnIndexAfterMove: number,
//       endMatchScores: number[],
//       turnCountAfterMove: number[],
//       buffsAfterMove: string[],
//       keepSpawningBuffs: boolean,
//       gameOver: boolean): void {
//     let expectedMove:IMove = {
//         turnIndex: turnIndexAfterMove,
//         endMatchScores: endMatchScores,
//         state: {board: boardAfterMove, delta: {row: row, col: col, moveType: moveType, attackType: attackType}, gameOver: gameOver, turnCounts: turnCountAfterMove, currentBuffs: buffsAfterMove, buffsEnabled: keepSpawningBuffs}
//       };
//     let stateBeforeMove: IState = boardBeforeMove ? {board: boardBeforeMove, delta: null, gameOver: false, turnCounts: turnCountBeforeMove, currentBuffs: currentBuffs, buffsEnabled: buffsEnabled} : null;
//     let move: IMove = gameLogic.createMove(stateBeforeMove, row, col, moveType, turnIndexBeforeMove);
//     expect(angular.equals(move, expectedMove)).toBe(true);
//   }
//   function expectBuff(
//       turnIndexBeforeMove: number,
//       turnCountBeforeMove: number[],
//       currentBuffs: string[],
//       buffsEnabled: boolean,
//       boardBeforeMove: Board[],
//       row: number,
//       col: number,
//       moveType: string,
//       attackType: string,
//       boardAfterMove: Board[],
//       turnIndexAfterMove: number,
//       endMatchScores: number[],
//       turnCountAfterMove: number[],
//       buffsAfterMove: string[],
//       keepSpawningBuffs: boolean,
//       gameOver: boolean,
//       expectedSpawnRow: number,
//       expectedSpawnCol: number): void {
//     let possibleBoardAfterMove1 = angular.copy(boardAfterMove);
//     let possibleBoardAfterMove2 = angular.copy(boardAfterMove);
//     possibleBoardAfterMove1[turnIndexBeforeMove+2][expectedSpawnRow][expectedSpawnCol] = 'grenade';
//     possibleBoardAfterMove2[turnIndexBeforeMove+2][expectedSpawnRow][expectedSpawnCol] = 'air strike';
//     let possibleMove1:IMove = {
//         turnIndex: turnIndexAfterMove,
//         endMatchScores: endMatchScores,
//         state: {board: possibleBoardAfterMove1, delta: {row: row, col: col, moveType: moveType, attackType: attackType}, gameOver: gameOver, turnCounts: turnCountAfterMove, currentBuffs: buffsAfterMove, buffsEnabled: keepSpawningBuffs}
//       };
//     let possibleMove2:IMove = {
//         turnIndex: turnIndexAfterMove,
//         endMatchScores: endMatchScores,
//         state: {board: possibleBoardAfterMove2, delta: {row: row, col: col, moveType: moveType, attackType: attackType}, gameOver: gameOver, turnCounts: turnCountAfterMove, currentBuffs: buffsAfterMove, buffsEnabled: keepSpawningBuffs}
//       };
//     let stateBeforeMove: IState = boardBeforeMove ? {board: boardBeforeMove, delta: null, gameOver: false, turnCounts: turnCountBeforeMove, currentBuffs: currentBuffs, buffsEnabled: buffsEnabled} : null;
//     let move: IMove = gameLogic.createMove(stateBeforeMove, row, col, moveType, turnIndexBeforeMove);
//     let success = (angular.equals(move, possibleMove1) || angular.equals(move, possibleMove2)); 
//     expect(success).toBe(true);
//   }  
//   it("Initial move", function() {
//     let move: IMove = gameLogic.createInitialMove();
//     let expectedMove:IMove = {
//         turnIndex: P1_TURN,
//         endMatchScores: NO_ONE_WINS,
//         state: {board: 
//           [[['', '', '', '', ''],
//           ['', '', '', '', ''],
//           ['', '', '', '', ''],
//           ['', '', '', '', ''],
//           ['', '', '', '', ''],
//           ['', '', '', '', '']], 
//           [['', '', '', '', ''],
//           ['', '', '', '', ''],
//           ['', '', '', '', ''],
//           ['', '', '', '', ''],
//           ['', '', '', '', ''],
//           ['', '', '', '', '']],
//           [['', '', '', '', ''],
//           ['', '', '', '', ''],
//           ['', '', '', '', ''],
//           ['', '', '', '', ''],
//           ['', '', '', '', ''],
//           ['', '', '', '', '']],
//           [['', '', '', '', ''],
//           ['', '', '', '', ''],
//           ['', '', '', '', ''],
//           ['', '', '', '', ''],
//           ['', '', '', '', ''],
//           ['', '', '', '', '']]],
//           delta: null,
//           gameOver: false,
//           turnCounts: [0,0],
//           currentBuffs: ['',''],
//           buffsEnabled: true}
//       };
//     expect(angular.equals(move, expectedMove)).toBe(true);
//   });
//   it("P1 moving in 0x0 from initial state", function() {
//     expectMove(P1_TURN, null, null, null, null, 0, 0, 'move', '',
//       [[['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']], 
//       [['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['P', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']]], 
//       P2_TURN, NO_ONE_WINS, [1,0], ['',''], true, false);
//   });
//   it("P2 moving in 1x1", function() {
//     expectMove(P2_TURN, [1,0], ['',''], true,
//       [[['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']], 
//       [['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['P', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']]], 
//       1, 1, 'move', '',
//       [[['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']], 
//       [['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['P', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['', '', '', '', ''],
//       ['', 'P', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']]], 
//       P1_TURN, NO_ONE_WINS, [1,1], ['',''], true, false);
//   });
//   it("P2 attacking in 1x1", function() {
//     expectMove(P2_TURN, [2,1], ['',''], true,
//       [[['B', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']], 
//       [['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['P', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['B', '', '', '', ''],
//       ['', 'P', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']]],
//       1, 1, 'attack', '',
//       [[['B', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']], 
//       [['', '', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['P', '', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['B', '', '', '', ''],
//       ['', 'P', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']]], 
//       P1_TURN, NO_ONE_WINS, [2,2], ['',''], true, false);
//   });
//   it("P2 attacking with grenade in 1x1", function() {
//     expectMove(P2_TURN, [2,1], ['','grenade'], true,
//       [[['B', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']], 
//       [['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['P', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['B', '', '', '', ''],
//       ['', 'P', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']]],
//       1, 1, 'attack', 'grenade',
//       [[['B', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']], 
//       [['', '', '', '', ''],
//       ['B', 'B', 'B', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['P', '', '', '', ''],
//       ['B', 'B', 'B', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['B', '', '', '', ''],
//       ['', 'P', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']]], 
//       P1_TURN, NO_ONE_WINS, [2,2], ['',''], true, false);
//   });
//   it("P2 attacking with air strike in 1x1", function() {
//     expectMove(P2_TURN, [2,1], ['','air strike'], true,
//       [[['B', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']], 
//       [['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['P', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['B', '', '', '', ''],
//       ['', 'P', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']]],
//       1, 1, 'attack', 'air strike',
//       [[['B', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']], 
//       [['', 'B', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', 'B', '', '', '']],
//       [['P', 'B', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', 'B', '', '', '']],
//       [['B', '', '', '', ''],
//       ['', 'P', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']]], 
//       P1_TURN, NO_ONE_WINS, [2,2], ['',''], true, false);
//   });
//   it("atacking in a non-empty position is illegal", function() {
//     expectException(P1_TURN, [2,2], ['',''], true,
//       [[['B', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']], 
//       [['', '', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['P', '', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['B', '', '', '', ''],
//       ['', 'P', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']]], 
//       0, 0, 'attack', '', false);
//   });
//   it("cannot move after the game is over", function() {
//     expectException(P1_TURN, [2,2], ['',''], true,
//       [[['B', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']], 
//       [['', '', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['P', '', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['B', '', '', '', ''],
//       ['', 'P', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']]], 
//       2, 1, 'attack', '', true);
//   });
//   it("P1 moving in 2x1", function() { //current position is 2x0
//     expectMove(P1_TURN, [2,2], ['',''], true,
//       [[['B', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']], 
//       [['', '', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['P', '', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['B', '', '', '', ''],
//       ['', 'P', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']]], 
//       2, 1, 'move', '',
//       [[['B', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']], 
//       [['', '', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['', '', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', 'P', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['B', '', '', '', ''],
//       ['', 'P', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']]], 
//       P2_TURN, NO_ONE_WINS, [3,2], ['',''], true, false);
//   });
//   it("P2 wins by attacking in 2x1", function() {
//     expectMove(P2_TURN, [3,2], ['',''], true,
//       [[['B', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']], 
//       [['', '', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['', '', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', 'P', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['B', '', '', '', ''],
//       ['', 'P', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']]],
//       2, 1, 'attack', '', 
//       [[['B', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']], 
//       [['', '', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', 'D', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['', '', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', 'D', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['B', '', '', '', ''],
//       ['', 'P', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']]], 
//       NO_ONE_TURN, P2_WIN_SCORES, [3,3], ['',''], true, true);
//   });
//   it("P1 wins by attacking in 1x1", function() {
//     expectMove(P1_TURN, [2,2], ['',''], true,
//       [[['B', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']], 
//       [['', '', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['', '', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', 'P', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['B', '', '', '', ''],
//       ['', 'P', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']]],
//       1, 1, 'attack', '',
//       [[['B', '', '', '', ''],
//       ['', 'D', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']], 
//       [['', '', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['', '', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', 'P', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['B', '', '', '', ''],
//       ['', 'D', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']]], 
//       NO_ONE_TURN, P1_WIN_SCORES, [3,2], ['',''], true, true);
//   });
//   it("P1 wins with air strike in 0x1", function() {
//     expectMove(P1_TURN, [2,2], ['air strike',''], true,
//       [[['B', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']], 
//       [['', '', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['', '', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', 'P', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['B', '', '', '', ''],
//       ['', 'P', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']]],
//       0, 1, 'attack', 'air strike',
//       [[['B', 'B', '', '', ''],
//       ['', 'D', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', 'B', '', '', '']], 
//       [['', '', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['', '', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', 'P', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['B', 'B', '', '', ''],
//       ['', 'D', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', 'B', '', '', '']]], 
//       NO_ONE_TURN, P1_WIN_SCORES, [3,2], ['',''], true, true);
//   });
//   it("P2 wins with grenade in 2x0", function() {
//     expectMove(P2_TURN, [5,4], ['','grenade'], true,
//       [[['B', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']], 
//       [['', '', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['', '', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', 'P', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['B', '', '', '', ''],
//       ['', 'P', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']]],
//       2, 0, 'attack', 'grenade',
//       [[['B', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']], 
//       [['', '', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['B', 'D', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['', '', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['B', 'D', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['B', '', '', '', ''],
//       ['', 'P', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']]], 
//       NO_ONE_TURN, P2_WIN_SCORES, [5,5], ['',''], true, true);
//   });
//   it("P1 attacking outside the board (in 0x7) is illegal", function() {
//     expectException(P1_TURN, [3,3], ['',''], true,
//       [[['B', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']], 
//       [['', '', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['', '', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', 'P', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['B', '', '', '', ''],
//       ['', 'P', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']]], 
//       0, 7, 'attack', '', false);
//   });
//   it("P1 attacking on first move is illegal", function() {
//     expectException(P1_TURN, [0,0], null, null, null, 0, 1, 'attack', '', false);
//   });
//   it("P2 attacking on first move is illegal", function() {
//     expectException(P2_TURN, [1,0], ['',''], true,
//       [[['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']], 
//       [['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['', '', '', '', ''],
//       ['', 'P', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']]], 
//       0, 1, 'attack', '', false);
//   });
//   it("Buff spawns in 5x4 after P2 attacks", function() {
//     expectBuff(P2_TURN, [4,3], ['',''], true,
//       [[['B', 'B', 'B', 'B', 'B'],
//       ['B', 'B', 'B', 'B', 'B'],
//       ['B', 'B', 'B', 'B', 'B'],
//       ['B', 'B', 'B', 'B', 'B'],
//       ['B', 'B', 'B', 'B', 'B'],
//       ['B', 'B', 'B', '', '']], 
//       [['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['P', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['B', 'B', 'B', 'B', 'B'],
//       ['B', 'B', 'B', 'B', 'B'],
//       ['B', 'B', 'B', 'B', 'B'],
//       ['B', 'B', 'B', 'B', 'B'],
//       ['B', 'B', 'B', 'B', 'B'],
//       ['B', 'B', 'B', 'P', '']]],
//       1, 1, 'attack', '',
//       [[['B', 'B', 'B', 'B', 'B'],
//       ['B', 'B', 'B', 'B', 'B'],
//       ['B', 'B', 'B', 'B', 'B'],
//       ['B', 'B', 'B', 'B', 'B'],
//       ['B', 'B', 'B', 'B', 'B'],
//       ['B', 'B', 'B', '', '']], 
//       [['', '', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['P', '', '', '', ''],
//       ['', 'B', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', ''],
//       ['', '', '', '', '']],
//       [['B', 'B', 'B', 'B', 'B'],
//       ['B', 'B', 'B', 'B', 'B'],
//       ['B', 'B', 'B', 'B', 'B'],
//       ['B', 'B', 'B', 'B', 'B'],
//       ['B', 'B', 'B', 'B', 'B'],
//       ['B', 'B', 'B', 'P', 'buff']]], 
//       P1_TURN, NO_ONE_WINS, [4,4], ['',''], true, false, 5, 4);
//   });
// });
//# sourceMappingURL=gameLogic_test.js.map