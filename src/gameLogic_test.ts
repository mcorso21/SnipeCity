describe("In SnipeCity", function() {
  let P1_TURN = 0;
  let P2_TURN = 1;
  let NO_ONE_TURN = -1;
  let NO_ONE_WINS: number[] = null;
  let P1_WIN_SCORES = [1, 0];
  let P2_WIN_SCORES = [0, 1];
  let TIE_SCORES = [0, 0];

    
  function expectException(
      turnIndexBeforeMove: number,
      turnCountBeforeMove: number[],
      boardBeforeMove: Board[],
      row: number,
      col: number,
      moveType: string,
      attackType: string,
      gameOver: boolean): void {
    let stateBeforeMove: IState = boardBeforeMove ? {board: boardBeforeMove, delta: null, gameOver: gameOver, turnCounts: turnCountBeforeMove} : null;
    // We expect an exception to be thrown :)
    let didThrowException = false;
    try {
      gameLogic.createMove(stateBeforeMove, row, col, moveType, turnIndexBeforeMove);
    } catch (e) {
      didThrowException = true;
    }
    if (!didThrowException) {
      throw new Error("We expect an illegal move, but createMove didn't throw any exception!")
    }
  }

  function expectMove(
      turnIndexBeforeMove: number,
      turnCountBeforeMove: number[],
      boardBeforeMove: Board[],
      row: number,
      col: number,
      moveType: string,
      attackType: string,
      boardAfterMove: Board[],
      turnIndexAfterMove: number,
      endMatchScores: number[],
      turnCountAfterMove: number[],
      gameOver: boolean): void {
    let expectedMove:IMove = {
        turnIndex: turnIndexAfterMove,
        endMatchScores: endMatchScores,
        state: {board: boardAfterMove, delta: {row: row, col: col, moveType: moveType, attackType: attackType}, gameOver: gameOver, turnCounts: turnCountAfterMove}
      };
    let stateBeforeMove: IState = boardBeforeMove ? {board: boardBeforeMove, delta: null, gameOver: false, turnCounts: turnCountBeforeMove} : null;
    let move: IMove = gameLogic.createMove(stateBeforeMove, row, col, moveType, turnIndexBeforeMove);
    console.log(move);
    expect(angular.equals(move, expectedMove)).toBe(true);
  }

  it("Initial move", function() {
    let move: IMove = gameLogic.createInitialMove();
    let expectedMove:IMove = {
        turnIndex: P1_TURN,
        endMatchScores: NO_ONE_WINS,
        state: {board: 
          [[['', '', '', '', ''],
          ['', '', '', '', ''],
          ['', '', '', '', ''],
          ['', '', '', '', ''],
          ['', '', '', '', ''],
          ['', '', '', '', '']], 
          [['', '', '', '', ''],
          ['', '', '', '', ''],
          ['', '', '', '', ''],
          ['', '', '', '', ''],
          ['', '', '', '', ''],
          ['', '', '', '', '']],
          [['', '', '', '', ''],
          ['', '', '', '', ''],
          ['', '', '', '', ''],
          ['', '', '', '', ''],
          ['', '', '', '', ''],
          ['', '', '', '', '']],
          [['', '', '', '', ''],
          ['', '', '', '', ''],
          ['', '', '', '', ''],
          ['', '', '', '', ''],
          ['', '', '', '', ''],
          ['', '', '', '', '']]],
          delta: null,
          gameOver: false,
          turnCounts: [0,0]}
      };
    expect(angular.equals(move, expectedMove)).toBe(true);
  });
  
  it("P1 moving in 0x0 from initial state", function() {
    expectMove(P1_TURN, null, null, 0, 0, 'move', '',
      [[['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']], 
      [['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']],
      [['P', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']],
      [['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']]], 
      P2_TURN, NO_ONE_WINS, [1,0], false);
  });

  it("P2 moving in 1x1", function() {
    expectMove(P2_TURN, [1,0],
      [[['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']], 
      [['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']],
      [['P', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']],
      [['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']]], 
      1, 1, 'move', '',
      [[['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']], 
      [['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']],
      [['P', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']],
      [['', '', '', '', ''],
      ['', 'P', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']]], 
      P1_TURN, NO_ONE_WINS, [1,1], false);
  });

  it("P2 attacking in 1x1", function() {
    expectMove(P2_TURN, [2,1],
      [[['B', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']], 
      [['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']],
      [['P', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']],
      [['B', '', '', '', ''],
      ['', 'P', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']]],
      1, 1, 'attack', '',
      [[['B', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']], 
      [['', '', '', '', ''],
      ['', 'B', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']],
      [['P', '', '', '', ''],
      ['', 'B', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']],
      [['B', '', '', '', ''],
      ['', 'P', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']]], 
      P1_TURN, NO_ONE_WINS, [2,2], false);
  });

  it("atacking in a non-empty position is illegal", function() {
    expectException(P1_TURN, [2,2],
      [[['B', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']], 
      [['', '', '', '', ''],
      ['', 'B', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']],
      [['P', '', '', '', ''],
      ['', 'B', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']],
      [['B', '', '', '', ''],
      ['', 'P', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']]], 
      0, 0, 'attack', '', false);
  });

  it("cannot move after the game is over", function() {
    expectException(P1_TURN, [2,2],
      [[['B', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']], 
      [['', '', '', '', ''],
      ['', 'B', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']],
      [['P', '', '', '', ''],
      ['', 'B', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']],
      [['B', '', '', '', ''],
      ['', 'P', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']]], 
      2, 1, 'attack', '', true);
  });

  it("P1 moving in 2x1", function() { //current position is 2x0
    expectMove(P1_TURN, [2,2],
      [[['B', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']], 
      [['', '', '', '', ''],
      ['', 'B', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']],
      [['P', '', '', '', ''],
      ['', 'B', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']],
      [['B', '', '', '', ''],
      ['', 'P', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']]], 
      2, 1, 'move', '',
      [[['B', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']], 
      [['', '', '', '', ''],
      ['', 'B', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']],
      [['', '', '', '', ''],
      ['', 'B', '', '', ''],
      ['', 'P', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']],
      [['B', '', '', '', ''],
      ['', 'P', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']]], 
      P2_TURN, NO_ONE_WINS, [3,2], false);
  });

  it("P2 wins by attacking in 2x1", function() {
    expectMove(P2_TURN, [3,2],
      [[['B', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']], 
      [['', '', '', '', ''],
      ['', 'B', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']],
      [['', '', '', '', ''],
      ['', 'B', '', '', ''],
      ['', 'P', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']],
      [['B', '', '', '', ''],
      ['', 'P', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']]],
      2, 1, 'attack', '',
      [[['B', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']], 
      [['', '', '', '', ''],
      ['', 'B', '', '', ''],
      ['', 'D', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']],
      [['', '', '', '', ''],
      ['', 'B', '', '', ''],
      ['', 'D', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']],
      [['B', '', '', '', ''],
      ['', 'P', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']]], 
      NO_ONE_TURN, P2_WIN_SCORES, [3,3], true);
  });

  it("P1 wins by attacking in 1x1", function() {
    expectMove(P1_TURN, [3,3],
      [[['B', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']], 
      [['', '', '', '', ''],
      ['', 'B', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']],
      [['', '', '', '', ''],
      ['', 'B', '', '', ''],
      ['', 'P', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']],
      [['B', '', '', '', ''],
      ['', 'P', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']]],
      1, 1, 'attack', '',
      [[['B', '', '', '', ''],
      ['', 'D', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']], 
      [['', '', '', '', ''],
      ['', 'B', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']],
      [['', '', '', '', ''],
      ['', 'B', '', '', ''],
      ['', 'P', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']],
      [['B', '', '', '', ''],
      ['', 'D', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', ''],
      ['', '', '', '', '']]], 
      NO_ONE_TURN, P1_WIN_SCORES, [4,3], true);
  });

  // it("P1 attacking outside the board (in 0x3) is illegal", function() {
  //   expectException(P1_TURN,
  //     [[['B', '', ''],
  //      ['', '', ''],
  //      ['', '', ''],
  //      ['', '', ''],
  //      ['', '', '']],
  //      [['', 'B', ''],
  //      ['', '', ''],
  //      ['', 'P', ''],
  //      ['', '', ''],
  //      ['', '', '']],
  //      [['', 'B', ''],
  //      ['', '', ''],
  //      ['', '', ''],
  //      ['', '', ''],
  //      ['', '', '']],
  //      [['B', '', ''],
  //      ['', '', ''],
  //      ['', 'P', ''],
  //      ['', '', ''],
  //      ['', '', '']]], 
  //     0, 3, 'attack');
  // });
});
